networks:
  shared-network:
    external: true
services: 
  app: 
    build: 
      context: .
      dockerfile: Dockerfile
    image: pets:latest
    networks:
      - shared-network
      - default
    container_name: pets
    ports: 
      - "8088:8088"
    environment:
      - SPRING_DATASOURCE_URL=${DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD} 
      - JAVA_OPTS=${JAVA_OPTS}
      - VALIDATION_ANIMAL_TYPES=${VALIDATION_ANIMAL_TYPES}
      - VALIDATION_ANIMAL_NAMES=${VALIDATION_ANIMAL_NAMES}
      - SPRING_REDIS_HOST=${SPRING_REDIS_HOST}
      - SPRING_KAFKA_BOOTSTRAP_SERVICES=${SPRING_KAFKA_BOOTSTRAP_SERVICES}
      - SPRING_KAFKA_CONSUMER_GROUP_ID=${SPRING_KAFKA_CONSUMER_GROUP_ID}
      - IMAGE_AI_URL=${IMAGE_AI_URL}
    depends_on:
      db:
        condition: service_healthy 
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      local-image: 
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
  db:
    image: postgres:17-alpine
    container_name: pets_app_db
    environment: 
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER:-user}"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: pets_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: pets_kafka    
    ports:
      - '9092:9092'
    networks:
      - shared-network
      - default
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://${SPRING_KAFKA_BOOTSTRAP_SERVICES} 
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@pets_kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_NUM_PARTITIONS=10
    healthcheck:                  
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server ${SPRING_KAFKA_BOOTSTRAP_SERVICES} --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  local-image:
    build: 
      context: ./python_image
      dockerfile: Dockerfile.model
    container_name: local-image
    networks:
      - shared-network
    ports:
     - "8000:8000"
    depends_on:
      - minio
#    devices:
#       - "nvidia.com/gpu:all"   
#      - /dev/nvidia0:/dev/nvidia0
#      - /dev/nvidiactl:/dev/nvidiactl
#      - /dev/nvidia-uvm:/dev/nvidia-uvm
    environment:
      - HF_MODEL_REPO=runwayml/stable-diffusion-v1-5
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    devices:
      - nvidia.com/gpu=all
#    runtime: nvidia
#    gpus: all
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: cdi
#              device_ids:
#                - nvidia.com/gpu=all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 200s # make it less depends on your devices
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    networks:
      - shared-network
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data 
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  minio_data:
  db_data:
  redis_data:

